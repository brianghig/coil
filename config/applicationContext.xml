<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd" >
	
	<context:annotation-config />
	<context:component-scan annotation-config="true" base-package="com.brianghig" />
	
	<!-- Supports JSON Mapping -->
	<bean id="jsonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
	
	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- Other Message Converters, such as XML via Castor, go here -->
				<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
					<property name="objectMapper" ref="jsonObjectMapper" />
					<property name="supportedMediaTypes" value="application/json" />
				</bean>
			</list>
		</property>
	</bean>
	
<!-- 	<mvc:annotation-driven /> -->
	
<!-- 	<aop:aspectj-autoproxy /> -->
	
<!-- 	<context:property-placeholder location="classpath*:hibernate.properties"/> -->
	
<!-- 	<bean id="jsonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" /> -->
	
<!-- 	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
<!-- 		<property name="driverClassName" value="${jdbc.driverClassName}" /> -->
<!-- 		<property name="url" value="${jdbc.url}" /> -->
<!-- 		<property name="username" value="${jdbc.username}" /> -->
<!-- 		<property name="password" value="${jdbc.password}" /> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> -->
<!-- 	    <property name="dataSource" ref="dataSource" /> -->
<!-- 	    <property name="packagesToScan" value="com.brianghig" /> -->
<!-- 	    <property name="jpaVendorAdapter"> -->
<!-- 	        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" /> -->
<!-- 	    </property> -->
<!-- 	    <property name="jpaDialect"> -->
<!-- 	        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" /> -->
<!-- 	    </property> -->
<!-- 	    <property name="jpaProperties"> -->
<!-- 	        <props>  -->
<!-- 				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>  -->
<!-- 			</props>  -->
<!-- 	    </property> -->
<!-- 	</bean> -->
	
<!-- 	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"> -->
<!-- 		<property name="entityManagerFactory" ref="entityManagerFactory" /> -->
<!-- 		<property name="dataSource" ref="dataSource" /> -->
<!-- 	</bean> -->
	
	<!-- Supports exception translation in beans marked with @Repository -->
	<!-- See http://blog.springsource.org/2006/08/07/using-jpa-in-spring-without-referencing-spring/
			If you want Spring's exception translation you can get that as well.
			All that needs to happen is the introduction of the @Repository
			annotation on your class. This (really minor) Spring annotation
			simply tells the Spring container that this class is a persistence
			repository and needs to have exception translation performed on it.
			To get the exception translation a simple bean definition is required. -->
<!-- 	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" /> -->
	
<!-- 	<tx:annotation-driven transaction-manager="transactionManager" /> -->
	
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager" /> -->
	
<!-- 	<aop:config> -->
<!-- 	    <aop:pointcut id="aopPointCut" expression="@annotation(org.springframework.transaction.annotation.Transactional)" /> -->
<!-- 	    <aop:advisor pointcut-ref="aopPointCut" advice-ref="txAdvice"/> -->
<!-- 	</aop:config> -->
	
</beans>